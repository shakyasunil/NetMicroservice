name: deploy
on:
  workflow_dispatch:
  # push:
  #   branches:
  #   - test
env:
  DOTNET_VERSION: '6.0.401'
jobs:
  build_zip:
    runs-on: ubuntu-latest
    # if: ${{ github.event_name == 'pull_request' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: perent workflow call 
      uses: ./.github/workflows/build
      with:
        dotnet_version: ${{ env.DOTNET_VERSION }}
  build_containers:
      runs-on: ubuntu-latest
      needs: build_zip
      # if: ${{ github.event_name == 'pull_request' }}
      steps:
        - uses: actions/checkout@v3
        - name: Download artifact from perent job
          uses: actions/download-artifact@v3
          with:
            name: build
        - name: create docker images
          shell: pwsh
          run: |
            $currentPath = Get-Location
            $source_folder="source"
            $source_path="$currentPath\$source_folder"
            $git_hash=$(git rev-parse --short "$GITHUB_SHA")

            $build_folder="build"
            $build_path="$currentPath\$build_folder"
            New-Item -Path "$currentPath" -Name "$source_folder" -ItemType Directory
            New-Item -Path "$currentPath" -Name "$build_folder" -ItemType Directory

            Expand-Archive "$currentPath\build.zip" -DestinationPath $source_path
           
            $files = Get-ChildItem "$source_path\services"
            foreach ($f in $files){
                 $service_name=$f.Name 
                 $image_name=$service_name.ToLower()
                 $service_output_path="$build_path\$service_name"
                 Write-Host "service_name is $service_name, service_output_path is $service_output_path"
                 New-Item -Path "$service_output_path" -ItemType Directory -Force

                 # get service latest version
                 $version=Get-ChildItem $source_path/services/$service_name -directory | Where{$_.name -match "(.*)$"}  | ForEach{[pscustomobject]@{'base'=$matches[1]}} | group base | ForEach{($_.Name)} | Select -Last 1
               
                 docker build --build-arg "SERVICE_NAME=$service_name" --build-arg "VERSION=$version" --build-arg "SOURCE_PATH=$source_folder/services" --build-arg "COMMIT_SHA=$Env:GITHUB_SHA" -t "$image_name`:latest" .

                 docker save  "$image_name`:latest" |  gzip > "$image_name-latest.tar.gz"
                 Copy "$image_name-latest.tar.gz" "$service_output_path\$image_name-latest.tar.gz"

                 # copy applications deployment template to output folder and rename to deployment.yaml
                 Copy "$currentPath\k8s\${service_name}_deployment.yaml" "$service_output_path\deployment.yaml"
                 (Get-Content "$service_output_path\deployment.yaml") -Replace "<name>", "$service_name" | Set-Content "$service_output_path\deployment.yaml"
                 (Get-Content "$service_output_path\deployment.yaml") -Replace "<image>", "$image_name`:latest" | Set-Content "$service_output_path\deployment.yaml"

                 # Copy Service template to output folder and rename to service.yaml
                 Copy "$currentPath\k8s\${service_name}_service.yaml" "$service_output_path\service.yaml" 
                 (Get-Content "$service_output_path\service.yaml") -Replace "<name>", "$service_name" | Set-Content "$service_output_path\service.yaml"
            }
           
        - name: save final artifact
          uses: actions/upload-artifact@v3
          with:
            name: deployment
            path: build
